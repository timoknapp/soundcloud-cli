on:
  workflow_dispatch:

name: Release

jobs:
  build:
    name: Semantic-Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - run: echo "1.0.0+1" > .version # this file seems to be required for the dry-mode

      # Go Semantic Release
      - name: Run Semantic Release
        uses: go-semantic-release/action@v1
        id: semrel
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          changelog-file: CHANGELOG.md
          dry: true # this will put the new version only in the '.version-unreleased' file.
          # update-file: .version

      - name: Build
        uses: actions/setup-go@v2
        with:
          go-version: "1.19" # The Go version to download (if necessary) and use.
      - run: go version
      - run: make build-linux
      - run: make build-mac
      - run: make build-windows
      - run: make build-linux-arm

      - name: Push tag
        id: tag
        if: steps.semrel.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          TAG="v${{steps.semrel.outputs.version}}"
          echo "::set-output name=name::$TAG"
          NOTES_FORMATTED=$(cat CHANGELOG.md | sed '/^#### Feature/s!\(#### \)!#### üéÅ !' | sed '/^#### Bug/s!\(#### \)!#### üêû !' | sed '/^#### Chores/s!\(#### \)!#### üöß !' | sed '/^#### CI/s!\(#### \)!#### üîÅ !' | sed '/^#### Tests/s!\(#### \)!#### üîé !')
          echo "$NOTES_FORMATTED"
          echo "::set-output name=notes::$NOTES_FORMATTED"
          git push origin :refs/tags/${TAG}
          git tag -fa ${TAG} -m "Release $TAG"
          git push origin ${TAG}

      - name: Create Release
        id: create_release
        if: steps.semrel.outputs.version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.name }}
          release_name: Release ${{ steps.tag.outputs.name }}
          draft: false
          prerelease: false
          body: ${{ steps.tag.outputs.notes }}

      - name: Upload Release Asset linux
        if: steps.semrel.outputs.version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: sc-linux
          asset_name: sc-linux
          asset_content_type: application/x-binary

      - name: Upload Release Asset mac
        if: steps.semrel.outputs.version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: sc-mac
          asset_name: sc-mac
          asset_content_type: application/x-binary

      - name: Upload Release Asset windows
        if: steps.semrel.outputs.version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: sc-win.exe
          asset_name: sc-win
          asset_content_type: application/x-binary

      - name: Upload Release Asset RPI
        if: steps.semrel.outputs.version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: sc-rpi
          asset_name: sc-rpi
          asset_content_type: application/x-binary
